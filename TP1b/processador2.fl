%option noyywrap
%{
#include <glib.h>
#include <string.h>

char* changeLetters(char* letter, char c, int val);
void transfereChar(char* text, char* letter);
void rewritten(char* text);
void addElement(char* text);
void writeFile();
void rest();

GTree* actores;
char text[64];
char* reverseText, *actor, *entry;
int indice=0, find=0;
FILE* file;

%}
%x AUTHOR EDITOR

L       [a-zA-Z.,úàáâéíçãì]

%%
	char* letter;
	file = fopen("graph.dot","w");
	char* start="graph {\n"; 
	fprintf(file,"%s",start);

author { 
	BEGIN AUTHOR;
}
editor {
	BEGIN EDITOR;
}

	/*CONTEXTO DO AUTOR*/
<AUTHOR>[\ \t]*=[\ \t]*[\"{] {
	printf("author = {");
}
<AUTHOR>[\"}], {
	if(find==1) writeFile();
	rewritten(text);
	indice=0;
	text[0]=0;
	find=0;
	rest();
	printf("},");
	BEGIN INITIAL;
}
<AUTHOR>\  {}
<AUTHOR>and\  {
	text[indice-1]=0;
	if(strcmp(actor,text)==0) find=1;
	else addElement(text);
	rewritten(text);
	indice=0;
	text[0]=0;
	printf("%s",yytext);
}
<AUTHOR>{L}* {
	strcpy(text+indice,yytext);
	indice+=strlen(yytext);
	text[indice++]=' ';
	text[indice]=0;
}

	/*CONTEXTO DO EDITOR*/
<EDITOR>[\ \t]*=[\ \t]*[\"{] {
	printf("editor = {");
}
<EDITOR>[\"}], {
	printf("},");
	BEGIN INITIAL;
}
<EDITOR>["{].*\n?[^=]*["}] {
	BEGIN INITIAL;
}

	/*CONTEXTO GERAL*/
<*>\\['~^`]. {
	letter=changeLetters(yytext+2,(yytext+1)[0],0);
	transfereChar(text,letter);
}
<*>\\´. {
	letter=changeLetters(yytext+3,(yytext+1)[0],1);
	transfereChar(text,letter);
}  
%%

/*FUNCOES*/

void addElement(char* text){
	char* element = (char*) malloc(sizeof(char)*32);
	strcpy(element,text);
	g_tree_insert(actores, element,element);	
}

gboolean iterator(gpointer key, gpointer value, gpointer user_data) {
	char* entry="\"%s\" -- \"%s\";\n";
	fprintf(file, entry, actor, (char *)key);

	return FALSE;
}

void writeFile(){
	g_tree_foreach(actores, (GTraverseFunc)iterator, NULL);
}


int checkChar(char* text, char c){
    int len = strlen(text);
    int i;
    for(i = 0; i < len; i++){
      if(text[i] == c){
       	return 1;
      }
   }
   return 0;
}

void rewritten(char* text){
	char** lista = (char**) malloc(sizeof(char*)*8);
	char* res = (char*) malloc(sizeof(char)*strlen(text));
	char* fim;
	int i=0;
	int side=0;
	int limit,j;

	char* token = strtok(text," ");
	while(token!=NULL){
		fim = (char*) malloc(sizeof(char)*32);
		strcpy(fim,token);
		lista[i]=fim;
		i++;
		token = strtok(NULL," ");
	}
	lista[i]=NULL;
	

	if(!(checkChar(lista[0],','))){
		strcpy(res,lista[i-1]);
		strcpy(res+strlen(res),", ");
		limit = i-1;
		j=0;
	}
	else {
		strcpy(res,lista[0]);
		strcpy(res+strlen(res)," ");
		limit = i; 
		j=1;
	}

	for(; j<limit; j++){
		if(checkChar(lista[j],'.')){
				strcpy(res+strlen(res),lista[j]);
				strcpy(res+strlen(res)," ");
		}
		else {
			char buf[32];
			sprintf(buf,"%c. ",lista[j][0]);
			strcpy(res+strlen(res),buf);
		}	
	}
	printf("%s",res); 
}

void transfereChar(char* text, char* letter){
	text[indice-1]=letter[0];
	text[indice++]=letter[1];
	text[indice]=0;
}

char* changeLetters(char* letter,char c, int val){
	switch(letter[0]){
		case 'a':	if(c == '\'' || val == 1) return("á");
					else if(c == '~') return ("ã");
					else if(c == '`') return ("à");
					break;
		case 'o':	if(c == '\'' ||  val == 1) return ("ó");
					else if(c == '~') return ("õ");
					else if(c == '`') return ("ò");
					break;
		case 'e':	if(c == '\'' ||  val == 1) return ("é");
					else if(c == '^') return ("ê");
					break;
		case 'i':	if(c == '\'' ||  val == 1) return ("í");
					else if(c == '`') return ("ì");
					break;
		case 'u':	if(c == '\'' ||  val == 1) return ("ú");
					else if(c == '`') return ("ù");
					break;
		case 'A':	if(c == '\'' ||  val == 1) return ("Á");
					else if(c == '~') return ("Ã");
					else if(c == '`') return ("À");
					break;
		case 'O':	if(c == '\'' ||  val == 1) return ("Ó");
					else if(c == '~') return ("Õ");
					else if(c == '`') return ("Ò");
					break;
		case 'E':	if(c == '\'' ||  val == 1) return ("É");
					else if(c == '^') return ("Ê");
					break;
		case 'I':	if(c == '\'' ||  val == 1) return ("Í");
					else if(c == '`') return ("Ì");
					break;
		case 'U':	if(c == '\'' ||  val == 1) return ("Ú");
					else if(c == '`') return ("Ù");
					break;
	}
	return letter;
}

gint compare(gconstpointer aPtr, gconstpointer bPtr){
	char* a, *b;

	a = (char *)aPtr;  
  	b = (char *)bPtr; 

	if(strcmp(a,b)==0) return 0;
	else if(strcmp(a,b)>0) return -1;
	return 1;
}

void rest(){
	g_tree_destroy(actores);
	actores = g_tree_new(compare);
}

int main (int argc, char* argv[]) {
	actores = g_tree_new(compare);

	actor = argv[2];

    if(argc == 3)
      yyin = fopen(argv[1], "r");

    yylex();

    char* end = "}";
 	fprintf(file,"%s",end);

 	system("dotty graph.dot");
    return 0;
}