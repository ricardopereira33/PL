%option noyywrap yylineno
%x INT INSTRUCTIONS READ WRITE ARRAYS EXEC EXP

%%
Int 					{ BEGIN INT; return Int; }
<INT>[a-zA-Z]+ 			{ yylval.s = strdup(yytext); return ID; }
<INT>[0-9]+ 			{ yylval.i = atoi(yytext); return NUM; }
<INT>[,=\[\]] 			{ return yytext[0]; }
<INT>;			  		{ BEGIN INITIAL; return yytext[0]; }
<INT>[ \n\t] 			{ }

func 			  		{ BEGIN FUNC; return func; }
<FUNC>[a-zA-Z]+   		{ }
<FUNC>\{		  		{ BEGIN INSTRUCTIONS; return yytext[0]; }
	
BEGIN			  		{ BEGIN INSTRUCTIONS; return BEGIN; }
<INSTRUCTIONS>END 		{ BEGIN INITIAL; return END; }

<INSTRUCTIONS>write 	{ BEGIN WRITE; return write; }
<WRITE>;				{ BEGIN INSTRUCTIONS; return yytext[0]; }


<INSTRUCTIONS>read  	{ BEGIN READ; return read; }
<READ>;					{ BEGIN INSTRUCTIONS; return yytext[0]; }


<INSTRUCTIONS>exec  	{ BEGIN EXEC; return exec; }
<EXEC>;					{ BEGIN INSTRUCTIONS; return yytext[0]; }


<INSTRUCTIONS>[a-zA-Z]* { BEGIN EXP; return exp; }
<EXP>;					{ BEGIN INSTRUCTIONS; return yytext[0]; }


<INSTRUCTIONS>\?|inLoop	{ BEGIN CONDITION; return cond; } 
<CONDITION>				{ }


<INSTRUCTIONS>!\?|[{}] 	{ return yytext; }

<*>$.*					{ }
<*>[ \t\n]* 			{ }
%%
