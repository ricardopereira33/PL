%option noyywrap yylineno
%x INT INSTRUCTIONS READ WRITE INSTR ARRAYS EXEC EXP CONDITION FUNC

%%
Int 					{ BEGIN INT; return Int; }
<INT>[a-zA-Z]+ 			{ yylval.id = strdup(yytext); return ID; }
<INT>[0-9]+ 			{ yylval.num = atoi(yytext); return NUM; }
<INT>[,=\[\]] 			{ return yytext[0]; } /*tokens que estao no meio da declaracao de variaveis*/
<INT>;			  		{ BEGIN INITIAL; return yytext[0]; }
<INT>[ \n\t]* 			{ }

F			  			{ BEGIN FUNC; return F; }
<FUNC>[a-zA-Z]+   		{ yylval.id = strdup(yytext); return STR;}
<FUNC>\{		  		{ BEGIN INSTRUCTIONS; return yytext[0]; }
	
START			  		{ BEGIN INSTRUCTIONS; return START; }
<INSTRUCTIONS>END 		{ BEGIN INITIAL; return END; }
<INSTRUCTIONS>[ \t\n]   { }

<INSTRUCTIONS>iWrite 	{ BEGIN WRITE; return iWrite; }
<WRITE>[()\[\]]			{ return yytext[0]; }
<WRITE>[a-zA-Z]+	    { yylval.id = strdup(yytext); return ID; }
<WRITE>[0-9]+			{ yylval.num = atoi(yytext); return NUM; }
<WRITE>["]				{ BEGIN INSTR; return yytext[0]; } /* string para ser imprimida no comando write (entre "")*/
<INSTR>[^"]+			{ yylval.id = strdup(yytext); return STR; }
<INSTR>["]				{ BEGIN WRITE; return yytext[0]; }
<WRITE>;				{ BEGIN INSTRUCTIONS; return yytext[0]; }

<INSTRUCTIONS>iRead  	{ BEGIN READ; return iRead; }
<READ>[()\[\]]			{ return yytext[0]; }
<READ>[a-zA-Z]+			{ yylval.id = strdup(yytext); return ID; }
<READ>[0-9]+			{ yylval.num = atoi(yytext); return NUM; }
<READ>;					{ BEGIN INSTRUCTIONS; return yytext[0]; }
<READ>[\t ]*			{ }

<INSTRUCTIONS>exe  		{ BEGIN EXEC; return exe; }
<EXEC>[a-zA-z]+			{ yylval.id = strdup(yytext); return STR; }
<EXEC>;					{ BEGIN INSTRUCTIONS; return yytext[0]; }
<EXEC>[ \t\n]*			{ }

<INSTRUCTIONS>iLoop				{ BEGIN CONDITION; return iLoop; } 
<INSTRUCTIONS>\?				{ BEGIN CONDITION; return yytext[0]; } 
<CONDITION>[-+*/%()=><!&|\[\]]	{ return yytext[0]; }
<CONDITION>[0-9]+ 				{ yylval.num = atoi(yytext); return NUM; }
<CONDITION>[a-zA-Z]+			{ yylval.id = strdup(yytext); return ID; }
<CONDITION>\{					{ BEGIN INSTRUCTIONS; return yytext[0]; }
<CONDITION>[ \t\n]				{ }

<INSTRUCTIONS>[a-zA-Z]+ { BEGIN EXP; yylval.id = strdup(yytext); return ID; }
<EXP>[-+*/%()=\[\]]    	{ return yytext[0]; }
<EXP>[0-9]+            	{ yylval.num = atoi(yytext); return NUM; }
<EXP>[A-Za-z]+         	{ yylval.id = strdup(yytext); return ID; }
<EXP>;					{ BEGIN INSTRUCTIONS; return yytext[0]; }

<INSTRUCTIONS>[!?{}] 	{ return yytext[0]; }

<*>$.*					{ }
<*>[ \t\n]* 			{ }

%%
